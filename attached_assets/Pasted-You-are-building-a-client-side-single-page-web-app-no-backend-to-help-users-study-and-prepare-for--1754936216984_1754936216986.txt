You are building a client-side single-page web app (no backend) to help users study and prepare for meetings, with configurable meeting schedules (user chooses their own midweek/weekend days/times) and a Convention Mode for taking structured notes. Target users are Jehovah’s Witnesses, but do NOT bundle copyrighted content; users import their own EPUBs (e.g., Bible and publications). Everything runs locally in the browser and can work on Replit’s HTML/CSS/JS template.

## Tech stack & constraints
- HTML + CSS + vanilla JavaScript (ES6 modules). No frameworks.
- UI: Bootstrap 5 components + Tailwind via CDN (MUST disable Tailwind preflight so it doesn’t clash with Bootstrap).
- EPUB rendering: epub.js (0.3.x) via CDN, using CFI for highlights.
- Storage: IndexedDB via localForage. All data stays local.
- Search: lunr.js (client-side) for fast search across notes/highlights.
- Markdown rendering: marked.js for meeting notes.
- Date/time utils: day.js (timezone + recurrence handling; keep it simple).
- Optional PWA: manifest + simple service worker to cache static assets (can be toggled at the end).

## Core requirements
1) **Onboarding & Settings**
   - On first run, show a 3-step wizard:
     (a) Choose UI language (EN/ES to start).
     (b) Configure meeting schedule: user selects days & local times for “Midweek” and “Weekend” meetings. These are NOT fixed; every user can choose their own (e.g., Tue 19:00 and Sun 10:00). Allow multiple congregations? not required for MVP.
     (c) Optionally enable Convention Mode planning and pick convention dates (start/end); can edit later.
   - A Settings page lets users change language, meeting times, and convention dates any time. Store in IndexedDB.

2) **Library & Reader (EPUB)**
   - Import EPUB (file input). Render in right-side viewer with epub.js.
   - Select text → open modal to add note and tags. Save highlight anchored by EPUB CFI. Store the quoted text for re-anchoring checks.
   - Left panel lists notes/highlights for the current EPUB; click → jump to CFI; delete/edit supported.
   - Persist annotations in IndexedDB, keyed per book (simple composite key like fileName+size).

3) **Bible import & scripture linking**
   - Users can import a Bible EPUB. Build a simple index of **book → chapter → CFI** (approximate is OK). Persist index.
   - Scripture parser that supports English & Spanish abbreviations and formats:
     - Examples: “Joh 3:16”, “Jn 3:16–18”, “1 Cor 13:4-7”, “Ps 23:1–3”, “Ro 8:38,39”, Spanish: “1 Co 13:4–7”, “Sal 23:1-3”, “Heb. 11:1”.
     - Normalize to canonical IDs like `JHN.3.16`.
     - Handle variations: NBSP, en dash, hyphen, dots, ordinals (1/2/3), abbreviations (“Re”/“Rev”).
   - When a scripture ref appears in notes or is typed in a quick-insert field, show a popover preview (if Bible imported) and a button “Open in Bible” that jumps to the chapter CFI.

4) **Meeting & Convention notes**
   - Meeting notes are **user-scheduled** from Settings:
     - The app should display an upcoming meetings panel using the user’s chosen days/times (Midweek/Weekend).
     - Clicking a meeting opens a note template (type, date auto-filled). The content is Markdown with a toolbar (bold/italic/list, insert scripture).
     - Scripture autocomplete: typing “Joh 3:16” suggests a canonical link and inserts a rich token or Markdown link.
   - Convention Mode:
     - User can enable and pick date range. Provide a simple session builder:
       - For each day, add sessions (Session title, speaker, optional theme).
       - Create notes per session; link scriptures and EPUB highlights.
     - Convention notes list grouped by day/session.

5) **Search**
   - Global search box with tabbed results:
     - Notes & Highlights
     - Scriptures (detected refs within notes)
     - Publications (by note quotes / doc titles)
   - Use lunr.js; index `note`, `quote`, `tags`, and `docTitle`. Highlight matched snippets.

6) **Export / Import**
   - Export selected notes or full library to Markdown and JSON (includes CFI, tags, timestamps).
   - Import JSON backup and merge (by `id`; last-writer-wins with `updatedAt`). Never hard-delete without a tombstone flag.

7) **Privacy & Legal**
   - All client-side. Do NOT upload files anywhere.
   - Do NOT bundle copyrighted JW content. Users import their own EPUBs.
   - Show a “Personal use only” note on EPUB import.

8) **UX polish**
   - Dark mode toggle; remember choice.
   - Language packs affect UI strings **and** scripture book-name parsing.
   - Keyboard accessibility and ARIA labels for buttons.
   - Empty states with helpful instructions.

## File structure (create exactly these)
- index.html                      // main layout (navbar, two-column layout, modals)
- styles.css                      // light custom styles
- js/app.js                       // app bootstrapping, routing (hash-based), theme, i18n loader
- js/storage.js                   // localForage wrappers, schema versioning, migrations, ids
- js/reader.js                    // epub.js wrapper (render, selection->CFI, reapply highlights)
- js/notes.js                     // annotations + meeting/convention notes CRUD + rendering
- js/scripture.js                 // parser + book maps + canonical id utilities + popovers
- js/search.js                    // lunr index build/query + UI for results
- js/schedule.js                  // user-configurable meeting scheduler, upcoming list, convention sessions
- js/exporter.js                  // Markdown/JSON export & JSON import merge
- data/books-en.json              // EN book/abbrev → canonical code (e.g., JHN, 1CO)
- data/books-es.json              // ES book/abbrev → canonical code (e.g., JN, 1CO)
- (Optional PWA at end)
- sw.js                           // service worker (only if PWA enabled)
- manifest.webmanifest            // PWA manifest (only if PWA enabled)

## index.html layout
- Top navbar:
  - App name, Dark mode toggle, Language selector (EN/ES), Import EPUB button, Import Bible button, Settings.
- Left column (sm=12, md=4): Tabs:
  - Notes (for current EPUB)
  - Meeting Planner (Upcoming meetings generated from user config; “Open note” buttons)
  - Convention (session list per selected date range; “New session note”)
  - Search (global)
- Right column (sm=12, md=8): EPUB viewer (#viewer) with current book title and location.
- Modals:
  - Add/Edit Highlight Note (quote readonly, note textarea, tags input)
  - Meeting Note Editor (Markdown textarea + scripture insert)
  - Convention Session Editor (title/speaker/theme/date/time)
  - Import Bible modal (progress, indexing status)
  - Export/Import modal
- Include a small “Scripture parser test” panel (hidden in Settings) to validate regex on sample strings.

## Data model (IndexedDB via localForage)
Use a simple namespaced key scheme. Suggested shapes:

- settings: {
    id: 'settings',
    lang: 'en'|'es',
    theme: 'light'|'dark',
    meetingSchedule: {
      midweek: [{ dow: 2, time: '19:00' }],   // multiple allowed
      weekend: [{ dow: 0, time: '10:00' }]
    },
    convention: {
      enabled: true|false,
      startISO: '2025-08-15',
      endISO: '2025-08-17',
      sessions: [
        { id, dateISO, startTime: '09:30', title, speaker, theme }
      ]
    }
  }

- documents: [{ id, title, fileKey, type: 'epub'|'bible', meta: {...} }]

- annotations (per document): [
    { id, documentId, cfiRange, quote, note, tags:[], createdAt, updatedAt }
  ]

- meetingNotes: [
    { id, dateISO, meetingType: 'Midweek'|'Weekend'|'Convention',
      sessionId?: string, title, bodyMarkdown, links: [{type:'verse'|'cfi', value:string}],
      tags:[], createdAt, updatedAt }
  ]

- bibleIndex: {
    documentId: 'doc_bible',
    map: { 'JHN': { '3': 'epubcfi(..chapter-start..)' }, ... },
    completeness: 0.0..1.0
  }

- searchIndex (optional cache): { builtAt, docHash }

## Implementation details
- Disable Tailwind preflight:
  ```html
  <script> tailwind = { config: { corePlugins: { preflight: false } } } </script>
  <script src="https://cdn.tailwindcss.com"></script>